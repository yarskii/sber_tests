{"uid":"375aa0f49058c638","name":"test_search_information","fullName":"tests.tests_media_page.test_search_information#test_search_information","historyId":"bf4820311b34c923f16a35763338b065","time":{"start":1735122508665,"stop":1735122508665,"duration":0},"description":"Тест для проверки поиска статьи","descriptionHtml":"<p>Тест для проверки поиска статьи</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x564dd4a9f31a <unknown>\n#1 0x564dd45b56e0 <unknown>\n#2 0x564dd45ecdc8 <unknown>\n#3 0x564dd45e8926 <unknown>\n#4 0x564dd46346f6 <unknown>\n#5 0x564dd4633d46 <unknown>\n#6 0x564dd4628203 <unknown>\n#7 0x564dd45f6cc0 <unknown>\n#8 0x564dd45f7c9e <unknown>\n#9 0x564dd4a6cd0b <unknown>\n#10 0x564dd4a70c92 <unknown>\n#11 0x564dd4a59b3c <unknown>\n#12 0x564dd4a71807 <unknown>\n#13 0x564dd4a3f0df <unknown>\n#14 0x564dd4a8e578 <unknown>\n#15 0x564dd4a8e740 <unknown>\n#16 0x564dd4a9e196 <unknown>\n#17 0x7f0189a9ca94 <unknown>\n#18 0x7f0189b29c3c <unknown>","statusTrace":"@pytest.fixture(scope='session', autouse=True)\n    def open_sber_url():\n        chrome_options = Options()\n        chrome_options.add_argument('--ignore-certificate-errors')\n        chrome_options.page_load_strategy = 'eager'\n>       browser.config.driver = webdriver.Chrome(options=chrome_options)\n\nconftest.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:238: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:325: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd12a1d9eb0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: Chrome failed to sta...\\\\n#16 0x564dd4a9e196 \\\\u003Cunknown>\\\\n#17 0x7f0189a9ca94 \\\\u003Cunknown>\\\\n#18 0x7f0189b29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\nE         (session not created: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x564dd4a9f31a <unknown>\nE       #1 0x564dd45b56e0 <unknown>\nE       #2 0x564dd45ecdc8 <unknown>\nE       #3 0x564dd45e8926 <unknown>\nE       #4 0x564dd46346f6 <unknown>\nE       #5 0x564dd4633d46 <unknown>\nE       #6 0x564dd4628203 <unknown>\nE       #7 0x564dd45f6cc0 <unknown>\nE       #8 0x564dd45f7c9e <unknown>\nE       #9 0x564dd4a6cd0b <unknown>\nE       #10 0x564dd4a70c92 <unknown>\nE       #11 0x564dd4a59b3c <unknown>\nE       #12 0x564dd4a71807 <unknown>\nE       #13 0x564dd4a3f0df <unknown>\nE       #14 0x564dd4a8e578 <unknown>\nE       #15 0x564dd4a8e740 <unknown>\nE       #16 0x564dd4a9e196 <unknown>\nE       #17 0x7f0189a9ca94 <unknown>\nE       #18 0x7f0189b29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: SessionNotCreatedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1735122507656,"stop":1735122507714,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"open_sber_url","time":{"start":1735122507714,"stop":1735122508541,"duration":827},"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x564dd4a9f31a <unknown>\n#1 0x564dd45b56e0 <unknown>\n#2 0x564dd45ecdc8 <unknown>\n#3 0x564dd45e8926 <unknown>\n#4 0x564dd46346f6 <unknown>\n#5 0x564dd4633d46 <unknown>\n#6 0x564dd4628203 <unknown>\n#7 0x564dd45f6cc0 <unknown>\n#8 0x564dd45f7c9e <unknown>\n#9 0x564dd4a6cd0b <unknown>\n#10 0x564dd4a70c92 <unknown>\n#11 0x564dd4a59b3c <unknown>\n#12 0x564dd4a71807 <unknown>\n#13 0x564dd4a3f0df <unknown>\n#14 0x564dd4a8e578 <unknown>\n#15 0x564dd4a8e740 <unknown>\n#16 0x564dd4a9e196 <unknown>\n#17 0x7f0189a9ca94 <unknown>\n#18 0x7f0189b29c3c <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 898, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/sber_tests/sber_tests/conftest.py\", line 68, in open_sber_url\n    browser.config.driver = webdriver.Chrome(options=chrome_options)\n                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/chrome/webdriver.py\", line 45, in __init__\n    super().__init__(\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py\", line 66, in __init__\n    super().__init__(command_executor=executor, options=options)\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 238, in __init__\n    self.start_session(capabilities)\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 325, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 380, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.12.8/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"Поиск информации"},{"name":"story","value":"Проверка выдачи результатов"},{"name":"owner","value":"Ярослав Гусев"},{"name":"tag","value":"web"},{"name":"parentSuite","value":"tests.tests_media_page"},{"name":"suite","value":"test_search_information"},{"name":"host","value":"fv-az2032-609"},{"name":"thread","value":"3132-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.tests_media_page.test_search_information"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"Testing","url":"https://rabota.sber.ru","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","owner":"Ярослав Гусев","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["web"]},"source":"375aa0f49058c638.json","parameterValues":[]}